# Data Selection

This section explores how to select specific subsets of time series data.

## Why subset data?

Selecting a subset of data is useful for:

- focusing analysis on data of interest (e.g. specific item or time range)
- reducing memory usage and computational overhead (helpful for large files)
- generating relevant illustrations (plots and table views)

## Alternative Methods

There are various ways of selecting subsets of dfs0 data. This section covers two different approaches:

1. Using `mikeio.read()`
2. Using Pandas `DataFrame`

As mentioned, MIKE IO also provides additional functionality for selecting subsets, however this course focuses on Pandas for simplicity.

::: {.callout-tip title="Memory considerations" collapse="true"}
Selecting data via the `read()` method is generally most performant, since it will avoid loading the entire file into memory. Selecting data via `Dataset`, `DataArray`, and `DataFrame` objects requires first loading the entire file into memory. 

A dfs0 file is a special case where the entire file is loaded into memory regardless, however that will not be the case for other dfs formats (e.g. dfs2, dfsu). Therefore, it's a good practice to use the `read()` method when you know which data you want in advance.
:::

## Selecting Items

When reading data with `mikeio.read()`, the `items` argument lets you specify which items to load. You can do this by providing a list of item names.

```{python}
#| echo: false
#| output: false
#| warning: false
#| message: false
import mikeio
```

```{python}
ds = mikeio.read(
    "data/sirius_idf_rainfall.dfs0", 
    items=[" F=1", " F=2"]
)
ds
```

Alternatively, you can select items using their numerical indices (zero-based). For example, to load the first and third items:

```{python}
ds = mikeio.read(
    "data/sirius_idf_rainfall.dfs0",
    items=[4, 3]
)
ds
```

::: {.callout-tip}
Using item indices can be convenient, especially for quick explorations. However, specifying item names explicitly makes your code more readable and robust to changes in the dfs0 file structure, such as if items are reordered.
:::

From a Pandas DataFrame, you can select items using standard Pandas column selection techniques.

```{python}
ds = mikeio.read("data/sirius_idf_rainfall.dfs0")
df = ds.to_dataframe()
df.head()
```

To select a single item:

```{python}
df[[" F=20"]].head()
```
::: {.callout-tip}
Indexing with a list returns another `DataFrame`, whereas indexing with a single value returns a `Series`.
:::

For multiple items, provide a list of column names:

```{python}
df[[" F=1", " F=2"]].head()
```

## Selecting Time Steps

When reading data with `mikeio.read()`, the `time` argument allows for various ways to specify the desired subset.

You can select by a single time step index (e.g., the first time step, index `0`).

```{python}
ds = mikeio.read(
    "data/single_water_level.dfs0",
    time=0
)
ds
```

Or provide a list of indices for specific time steps (e.g., the first three time steps).

```{python}
ds = mikeio.read(
    "data/single_water_level.dfs0",
    time=[0,1,2]
)
ds
```

You can also use timestamp strings.

```{python}
ds = mikeio.read(
    "data/single_water_level.dfs0",
    time="1993-12-02 00:00:00"
)
ds
```

Select multiple timestamps with a more general string, such as all times on a specific date.

```{python}
ds = mikeio.read(
    "data/single_water_level.dfs0",
    time="1993-12-03"
)
ds
```

To specify a time range, use Python's `slice()` object with start and end timestamps:

```{python}
ds = mikeio.read(
    "data/single_water_level.dfs0",
    time=slice("1993-12-02 12:00", "1993-12-02 16:00")
)
ds
```

::: {.callout-tip}
Python's `slice()` method is versatile for defining ranges. While list-like slicing notation (e.g., `time_series[start:end]`) is common with Pandas DataFrames, `slice(start, end)` is the explicit way to create a slice object, often used in functions like `mikeio.read()`.
:::

From a Pandas DataFrame, standard indexing and slicing techniques of the `DatetimeIndex` may be used.

To select by time step index, use `.iloc`.

```{python}
ds = mikeio.read("data/single_water_level.dfs0")
df = ds.to_dataframe()
df.iloc[[0]] 
```
::: {.callout-tip}
Providing a list to `iloc` returns another `DataFrame`, whereas providing a single value returns a `Series`.
:::

For the first three time steps:

```{python}
df.iloc[0:3]
```

For selection by timestamp strings, use `.loc`.

```{python}
df.loc[["1993-12-02 00:00:00"]]
```

To select all data for a particular day:

```{python}
df.loc["1993-12-03"].head()
```

And for a range between start and end timestamps:

```{python}
df.loc["1993-12-02 12:00":"1993-12-02 16:00"]
```

A key distinction in Pandas is between `.iloc` and `.loc`:

*   `.iloc` is used for integer-location based indexing (by position, e.g., `df.iloc[0]` for the first row).
*   `.loc` is used for label-based indexing (by index names or boolean arrays, e.g., `df.loc['2023-01-01']`).

When working with time series data having a `DatetimeIndex`, `.loc` is particularly powerful as it allows you to use date/time strings for intuitive selections and slicing, as shown in the examples.

## Example

Let's tie these concepts together with an example of plotting a subset of a dfs0 file.

**1. Read a specific item of the dfs0 file into a Dataset**
```{python}
ds = mikeio.read("data/single_water_level.dfs0", items="ST 2: WL (m)")
ds
```

**2. Convert to Pandas DataFrame:**
```{python}
df = ds.to_dataframe()
df
```

**3. Filter the Pandas DataFrame for the time range of interest.**
```{python}
df = df.loc["1993-12-02 00:00":"1993-12-02 4:00"]
df
```

**4. Plot**
```{python}
ax = df.plot()
ax.set_title("Water Level at Night")
ax.set_ylabel("Water Level (m)")
ax.grid(which="both")
```
::: {.callout-tip}
Plot methods often return a Matplotlib `Axes` object, conventionally called `ax`. Use it to customize the plot before it's displayed a Jupyter Cell.
:::
